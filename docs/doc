-------------------------------------progress:
(1) I need to define the problem.pddl and domain.pddl files, hopefully from python
	for that I need to use a python parser -> pddl or understand how to do it myself

(2) I need a solver that works on those files
	
We'll start with only fluents (numbers with "+", "-", "*" and "/" operations)
After which we will try to add durative actions

Both solver and parser need to have the capabilties for fluents and durative actions

-------------------------------------good stuff:
https://planning.wiki
	shows different PDDL versions and their usages

https://www.youtube.com/watch?v=ch0AnXVuNN8&ab_channel=MauroVallati 
	talk about classical planning explaining what grounding is 

A good solver using julia?
	from examples, seems to be working with only the basics. no fluents or durations
	https://github.com/APLA-Toolbox/PythonPDDL

python pddl parser with durative actions and others?
	https://github.com/karpase/pythonpddl

https://github.com/karpase/unified-planning
	Maybe this is all I need? "The unified_planning library makes it easy to formulate planning problems and to invoke automated planners."
		This is the source https://github.com/aiplan4eu/unified-planning

repo with high intentions
	https://github.com/AI-Planning
	https://github.com/AI-Planning/planutils
	http://education.planning.domains/
	http://ai.berkeley.edu/contest.html

	https://github.com/Dongbox/optic-clp-release

pacman competition... they use fastforward solver
	http://ai.berkeley.edu/contest.html
	https://github.com/AI4EDUC/pacman-contest-cluster

classical planning course. good stuff
	https://github.com/pucrs-automated-planning

This repo contains various automated planning systems with the source code.
	https://github.com/ssardina-planning/planners

Optic - https://nms.kcl.ac.uk/planning/software/optic.html

lpg - Optic competitor?
	https://lpg.unibs.it/lpg/ #pddl 2.2
	https://lpg.unibs.it/lpg/download-lpg-td.html

popf - Optic competitor?
	https://github.com/fmrico/popf
	https://nms.kcl.ac.uk/planning/software/popf.html #supports pddl2.1
	https://sourceforge.net/projects/tsgp/files/POPF/

planners html from kcl.ac.uk
	https://nms.kcl.ac.uk/planning/software/


Thoughts:
Robots need to deliver packages
pddl 2.1 does not support timed goals, only durative actions
I do want to have multi-robot capabilties, and need only 1 "trick" up my sleeve
We can have two seperate kinds of robots. chargebots and Deliverybots

Maybe this:
1) Learning Goal distribution + Charge State: 
	Solve a multi-robot plan with instantinous actions and no charge problems.
	We want to be as efficent as possible. That is, we want the robots to be as busy as they can.
	Robots should 'compete' over who transfered most packages. For each pickup + drop they get rewarded
	OR we can add a minimization over planlength / fuel used
		THIS SHOULD BE THE MOST COMPLICATED PART OF THE JOURNEY

	PROBLEM KIND: Instant Actions, Minimization (Not sure which solver does minimization...), Bool Fluents


2) Fixing Charge State: charging robots are doing their job 'on the fly'. They do not interrupt the deliverybots.
	our chargingdrones can literly fly from point to point and they charge the deliverybots so they can perform continous actions.
	To plan the chargingdrones route, we treat deliverybots as locations in a graph with different distances depending on where they are at planning time.
	We can create different move actions per distance, so they take different amount of times (~grounding)

	The specified goal is to have these deliverybots 'charged-up' before they reach low charge, and return to the dock.
	That is to say, each delivery bot has been visited.

	a charging-drone can hold X batteries

	We assume the deliverybots lose charge at a constant rate, so we can estimate when they will reach low charge before a plan is written down.

	Because we plan at a specific time, and assume the distances between robots are constant, the plan may not always be smart. Thus, we replan after each battery was provided.
	Still, there can be a time where some deliverybot goes low on charge. At the point, the drone should replan course and start by fueling said deliverybot. We don't need a planner for that.

	problem: we want the time to a be a function of distance. We can create multiple actions, one for each edge in the distance graph (n^2-n actions), which may be horrible for the solver.
	...or we can somehow create an adpative time for the action?


	PROBLEM KIND: DurativeActions (move), Int Fluents, Bool Fluents, Timed Goals

	3) The nice thing about this idea is that it completely seperates (1) from (2).
		We can work with an incomplete (1) where minimization did not happen.

	IDEA: planners seem to like to make 1 robot do all the work.
			How about we introduce a metric of the distance between fuel uses. We want to minimize this distance

	
