import unified_planning
from unified_planning.shortcuts import UserType, BoolType, RealType, \
        Fluent, DurativeAction, InstantaneousAction, SimulatedEffect, Problem, Object,\
        StartTiming, EndTiming, Real, GT
        
from unified_planning.io.pddl_writer import PDDLWriter
from unified_planning.io.pddl_reader import PDDLReader

from fractions import Fraction

location = UserType('location')
robot = UserType('robot')
package = UserType('package')

robot_at = Fluent('robot_at', BoolType(), r = robot, l = location)
distance = Fluent('distance', RealType(), l_from = location, l_to = location)
delivery_time = Fluent('delivery_time', RealType(), p = package)
robot_has_package = Fluent('robot_has_package', BoolType(), p = package, r = robot)
location_has_package = Fluent('location_has_package', BoolType(), p = package, l = location)
location_is_pump = Fluent('location_is_pump', BoolType(), l = location)
fuel = Fluent('fuel', RealType(0,100), r = robot)

move = DurativeAction('move',  r = robot, l_from = location, l_to = location)
r = move.parameter('r')
l_from = move.parameter('l_from')
l_to = move.parameter('l_to')
move.add_condition(StartTiming(),GT(fuel(r),distance(l_from, l_to)))
move.add_condition(StartTiming(),robot_at(r, l_from))
move.add_effect(StartTiming(),robot_at(r, l_from), False)
move.add_effect(EndTiming(),robot_at(r, l_to), True)
move.add_decrease_effect(EndTiming(),fuel(r),distance(l_from, l_to))

pickup = DurativeAction('pickup', p = package, r = robot, l = location)
p = pickup.parameter('p')
r = pickup.parameter('r')
l = pickup.parameter('l')
pickup.set_fixed_duration(1)
pickup.add_condition(StartTiming(),robot_at(r, l))
pickup.add_condition(StartTiming(),location_has_package(p, l))
pickup.add_effect(StartTiming(),location_has_package(p, l), False)
pickup.add_effect(EndTiming,robot_has_package(p, r), True)

drop = DurativeAction('drop', p = package, r = robot, l = location)
p = drop.parameter('p')
r = drop.parameter('r')
l = drop.parameter('l')
drop.set_fixed_duration(1)
drop.add_condition(StartTiming(),robot_at(r, l))
drop.add_condition(StartTiming(),location_has_package(p, l))
drop.add_effect(StartTiming(),robot_has_package(p, r), False)
drop.add_effect(EndTiming,location_has_package(p, l), True)

fillfuel = DurativeAction('fllfuel', r = robot, l = location)
r = fillfuel.parameter('r')
l = fillfuel.parameter('l')
fillfuel.set_fixed_duration(2)
fillfuel.add_condition(StartTiming(), location_is_pump(l))
fillfuel.add_effect(EndTiming, fuel(r), Real(Fraction(100.0)))

problem = Problem('maildelivery')
problem.add_action(move)
problem.add_action(pickup)
problem.add_action(drop)
problem.add_action(fillfuel)

locations = [Object(f"l{i}", location) for i in range(5)]
pump = Object("pump",location)
houses = [Object(f"h{i}", location) for i in range(2)]
deliverybot = Object("r0",robot)
note = Object("p0",package)
problem.add_objects(locations + [pump] + [deliverybot] + [note] + houses)

problem.set_initial_value(distance(locations[0],locations[1]),5.0)
problem.set_initial_value(distance(locations[1],locations[2]),5.0)
problem.set_initial_value(distance(locations[2],locations[3]),5.0)
problem.set_initial_value(distance(locations[3],locations[4]),5.0)

problem.set_initial_value(location_is_pump(pump),True)
problem.set_initial_value(distance(locations[2],pump),2)

problem.set_initial_value(robot_at(deliverybot,locations[0]),True)

problem.set_initial_value(distance(locations[3],houses[0]),2)
problem.set_initial_value(distance(locations[4],houses[1]),2)
problem.set_initial_value(location_has_package(note,houses[0]),True)

problem.set_initial_value(fuel(deliverybot),15.0)

problem.add_goal(location_has_package(note,houses[1]))


print(problem)



# w = PDDLWriter(problem)
# print(w.get_domain())
# print(w.get_problem())
# NLOC = 10
# locations = [unified_planning.model.Object('l%s' % i, Location) for i in range(NLOC)]
# problem.add_objects(locations)